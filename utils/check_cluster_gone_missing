#!/usr/bin/env bash

# Checks AWS cloudtrail logs for node shutdown events associated with a specific cluster_has_gone_missing (CHGM) alert,
# and prompts to post a CHGM message to service log and silence the PD alert.

REQUIRED_COMMANDS=( aws-get-creds.sh aws-validate-cluster.sh osdctl pd )
PD_SILENT_TEST_USER="P8QS6CC"
PD_CHGM_NOTE="User-initiated shutdown of nodes in the cluster. Servicelog posted. Silencing alert."
SL_URL="https://raw.githubusercontent.com/openshift/managed-notifications/master/osd/cluster_has_gone_missing.json"

usage(){
  echo "Post Cluster Has Gone Missing Servicelog"
  echo ""
  echo "Usage"
  echo "  ${0} [PAGERDUTY_INCIDENT]"
  echo ""
}

for cmd in "${REQUIRED_COMMANDS[@]}"
do
  command -v $cmd > /dev/null || (echo "Command $cmd is required for this script to work." && exit 1)
done

PD_ALERT="${1}"

if [[ -z "${PD_ALERT}" ]] ;
then
  usage
  exit 1
fi

ALERT_JSON="$(pd rest:get -e=/incidents/${PD_ALERT}/alerts 2>/dev/null)"
CLUSTER_UUID="$(jq -r '.alerts[].body.details.notes' <<< $ALERT_JSON |awk '/cluster_id/ {print $2}')"
CLUSTER_NAME="$(jq -r '.alerts[].body.details.name | split(".") | .[0] ' <<< $ALERT_JSON)"

if [[ -z $CLUSTER_UUID ]]
then
  echo "Failed to get cluster uuid associated with alert '${PD_ALERT}'"
  exit 1
fi

if [[ -z $CLUSTER_NAME ]]
then
  echo "Failed to get cluster name associated with alert '${PD_ALERT}'"
  exit 1
fi

echo "Checking cluster $CLUSTER_UUID"

tmpd=$(mktemp -d)
trap "rm -fr $tmpd" EXIT

aws-get-creds.sh $CLUSTER_UUID > $tmpd/exports 2>/dev/null
source $tmpd/exports

aws-validate-cluster.sh -r $AWS_DEFAULT_REGION -n $CLUSTER_NAME

read -p "Post a CHGM Servicelog and silence the alert? (Y/n)" -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi

pd incident:ack -i ${PD_ALERT}
osdctl servicelog post -t ${SL_URL} -p CLUSTER_UUID=${CLUSTER_UUID}
pd incident:notes -i ${PD_ALERT} -n "$PD_CHGM_NOTE"
pd incident:assign -i ${PD_ALERT} -u $PD_SILENT_TEST_USER
