#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset


PROCEED=FALSE

echo "Only run on 4.0.x - 4.13.x"

oc get clusterversion

read -p "Are you sure? " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
    PROCEED=TRUE
fi

if [[ ${PROCEED} != "TRUE" ]]
then
  exit 1
fi

for NODE in $(oc get nodes -o name --no-headers)
do
  echo "Debug pod on node $NODE"
  oc debug -n default $NODE -- chroot /host /bin/bash -c 'echo hello'
  sleep 2
done

oc project openshift-ovn-kubernetes

for MASTER in $(oc get nodes -l node-role.kubernetes.io/master= -o name --no-headers)
do
  echo "Deleting databases on master $MASTER"
  oc debug -n default $MASTER -- chroot /host /bin/bash -c  'rm -f /var/lib/ovn/etc/*.db'
  sleep 3
done

oc -n openshift-ovn-kubernetes delete pod -l=app=ovnkube-master

PROCEED=FALSE
until test $PROCEED == "TRUE"
do
  for OVNMASTER in $(oc -n openshift-ovn-kubernetes get pods -l app=ovnkube-master -o custom-columns=NAME:.metadata.name --no-headers)
     do echo "········································" ; \
     echo "· OVNKube Master: $OVNMASTER ·" ; \
     echo "········································" ; \
     echo 'North' `oc -n openshift-ovn-kubernetes rsh -Tc northd $OVNMASTER ovn-appctl -t /var/run/ovn/ovnnb_db.ctl cluster/status OVN_Northbound | grep Role` ; \
     echo 'South' `oc -n openshift-ovn-kubernetes rsh -Tc northd $OVNMASTER ovn-appctl -t /var/run/ovn/ovnsb_db.ctl cluster/status OVN_Southbound | grep Role`; \
     echo "····················"; \
  done

  read -p "Did that look ok? " -n 1 -r
  echo    # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
      PROCEED=TRUE
  fi
done

for MASTER in $(oc get nodes -l node-role.kubernetes.io/master= -o name --no-headers)
do
  echo "Restarting OVS services on node $MASTER" 
  oc debug -n default $MASTER -- chroot /host /bin/bash -c  'systemctl restart ovs-vswitchd ovsdb-server'
  sleep 2
done

for OVNNODEMASTER in $(oc get nodes -l node-role.kubernetes.io/master= -o custom-columns=NAME:.metadata.name --no-headers)
do
  echo "Deleting OVN-Kube Node on master $OVNNODEMASTER" 
  oc -n openshift-ovn-kubernetes delete --wait=false $(oc -n openshift-ovn-kubernetes get pod -l app=ovnkube-node --field-selector spec.nodeName=$OVNNODEMASTER -o name) 
  sleep 4
done

PROCEED=FALSE
until test $PROCEED == "TRUE"
do
  oc -n openshift-ovn-kubernetes get pods -o wide

  read -p "Did that look ok? " -n 1 -r
  echo    # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
      PROCEED=TRUE
  fi
done

for NODE in $(oc get nodes -l '!node-role.kubernetes.io/master' -o name --no-headers); \
do echo "Restarting OVS services on node $NODE" ; \
oc debug -n default $NODE -- chroot /host /bin/bash -c 'systemctl restart ovs-vswitchd ovsdb-server' ; sleep 2; \
done


for OVNKUBENODE in $(oc get nodes -l '!node-role.kubernetes.io/master' -o custom-columns=NAME:.metadata.name --no-headers); \
  do echo "Deleting OVN-Kube Node on node $OVNKUBENODE" ; \
  oc -n openshift-ovn-kubernetes delete --wait=false $(oc -n openshift-ovn-kubernetes get pod -l app=ovnkube-node --field-selector spec.nodeName=$OVNKUBENODE -o name) ; sleep 3; \
  done


PROCEED=FALSE
until $PROCEED="TRUE"
do
  oc -n openshift-ovn-kubernetes get pods -o wide

  read -p "Did that look ok? " -n 1 -r
  echo    # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
      PROCEED=TRUE
  fi
done

echo "DONE!"
